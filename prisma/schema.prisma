// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  firstName     String
  lastName      String?
  userName      String  @unique
  email         String  @unique
  profilePicUrl String?
  bio           String?
  coverPicUrl   String?
  passwordHash String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  Follows[] @relation("follower")
  following Follows[] @relation("following")

  likes     Like[]
  bookmarks Bookmark[]
  
  sentNotification Notification[] @relation("sentNotification")
  receivedNotification Notification[] @relation("receivedNotification")

  posts   Post[]
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id       String  @id @default(cuid())
  content  String
  imageUrl String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  parent   Post?  @relation("replyTree", fields: [parentId], references: [id])
  parentId String?

  replies Post[] @relation("replyTree")

  likes     Like[]
  bookmarks Bookmark[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Reply {
//   id       String  @id @default(cuid())
//   content  String
//   imageUrl String?

//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String

//   post   Post   @relation(fields: [postId], references: [id])
//   postId String

//   parent   Reply?  @relation("replyTree", fields: [parentId], references: [id])
//   parentId String?

//   replies Reply[] @relation("replyTree")
// }

model Like {
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model Bookmark {
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model Notification {
  id String @id @default(cuid())
  
  sender   User   @relation("sentNotification", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("receivedNotification",fields: [receiverId], references: [id])
  receiverId String

  type NotificationType

  postId String?
  commentId String?

  timestamp DateTime @default(now())
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  FOLLOW
}